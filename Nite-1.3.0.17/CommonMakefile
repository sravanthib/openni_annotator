#############################################################################
# Primesense Experience Engine template makefile.
# This file should not be made, but only included from other makefiles.
# By default, this makefile compiles in release. To compile a debug version:
#    make CFG=Debug
#
# Project makefile should define the following BEFORE including this file:
# SRC_FILES - a list of all source files
# Output name under one of the following:
#     EXE_NAME (executable), 
#     LIB_NAME (dynamic library) or 
#     SLIB_NAME (static library)
# BIN_DIR - Bin directory
# INC_DIRS - a list of additional include directories
# LIB_DIRS - a list of additional library directories
# USED_LIBS - a list of libraries to link with
# DEFINES - [Optional] additional preprocessor defines
# CFLAGS - [Optional] additional flags for the compiler
# LDFLAGS - [Optional] additional flags for the linker
# INTEL_COMPILER - [Optional] 1 to use intel compiler, 0 to use g++
# SSE_GENERATION - [Optional] The SSE generation to use (default is 3)
# TARGET_SYS_ROOT - [Optional] The path to the root of the target
# CROSS_PLATFORM - [Optional] When set to 1, Intel cross platform tool chain
#					Will be used.
#############################################################################

# some defaults
ifndef INTEL_COMPILER
	INTEL_COMPILER = 0
endif

ifndef SSE_GENERATION
	SSE_GENERATION = 3
endif

ifndef CFG
	CFG = Release
endif

ifndef TARGET_SYS_ROOT
	TARGET_SYS_ROOT = /
endif

ifndef CROSS_PLATFORM
	CROSS_PLATFORM = 0
endif

# tool chain
ifeq ($(CROSS_PLATFORM), 1)
	CC = i686-cm-linux-g++
	AR = i686-cm-linux-ar -cqs
else
	ifeq ($(INTEL_COMPILER), 1)
		CC = icpc
	else
		CC = g++
	endif
	AR = ar -cqs
endif

RM = rm -rf
CP = cp

# change c struct alignment options to be compatable with Win32
CFLAGS += -malign-double

# tell compiler to use the target system root
ifneq ("$(TARGET_SYS_ROOT)","/")
	CFLAGS += --sysroot=$(TARGET_SYS_ROOT)
	LDFLAGS += --sysroot=$(TARGET_SYS_ROOT)
endif

# define installation directories
INST_LIB = /usr/local/lib
INST_BIN = /usr/local/bin

# define the intermediate directory
INT_DIR = $(CFG)

# define output directory
OUT_DIR = $(BIN_DIR)

# define a function to figure .o file for each source file (placed under intermediate directory)
SRC_TO_OBJ = $(addprefix ./$(INT_DIR)/,$(addsuffix .o,$(notdir $(basename $1))))

# create a list of all object files
OBJ_FILES = $(call SRC_TO_OBJ,$(SRC_FILES))

# define a function to translate any source file to its dependency file
SRC_TO_DEP = $(addprefix ./$(INT_DIR)/,$(addsuffix .d,$(notdir $(basename $1))))

# create a list of all dependency files
DEP_FILES = $(call SRC_TO_DEP,$(SRC_FILES))

# append the -I switch to each include directory
INC_DIRS_OPTION = $(foreach dir,$(INC_DIRS),-I$(dir))

# append the -L switch to each library directory
LIB_DIRS_OPTION = $(foreach dir,$(LIB_DIRS),-L$(dir)) -L$(OUT_DIR)

# append the -l switch to each library used
USED_LIBS_OPTION = $(foreach lib,$(USED_LIBS),-l$(lib))

DEFINES += XN_SSE
# append the -D switch to each define
DEFINES_OPTION = $(foreach def,$(DEFINES),-D$(def))

# some lib / exe specifics
ifneq "$(LIB_NAME)" ""
	OUTPUT_NAME = lib$(LIB_NAME).so
	CFLAGS += -fPIC -fvisibility=hidden
	INST_DIR = $(INST_LIB)
	OUTPUT_COMMAND = $(CC) -o $(OUTPUT_FILE) $(OBJ_FILES) $(LDFLAGS) -shared
endif
ifneq "$(EXE_NAME)" ""
	OUTPUT_NAME = $(EXE_NAME)
	INST_DIR = $(INST_BIN)
	OUTPUT_COMMAND = $(CC) -o $(OUTPUT_FILE) $(OBJ_FILES) $(LDFLAGS)
endif
ifneq "$(SLIB_NAME)" ""
	OUTPUT_NAME = lib$(SLIB_NAME).a
	INST_DIR = $(INST_LIB)
	OUTPUT_COMMAND = $(AR) $(OUTPUT_FILE) $(OBJ_FILES)
endif

# full path to output file
OUTPUT_FILE = $(OUT_DIR)/$(OUTPUT_NAME)

# set Debug / Release flags
ifeq "$(CFG)" "Debug"
	CFLAGS += -g
	ifeq ($(SSE_GENERATION), 2)
                CFLAGS += -msse2
        else
                ifeq ($(SSE_GENERATION), 3)
                        CFLAGS += -msse3 -mssse3 -mpc80
                else
                        ($error "Only SSE2 and SSE3 are supported")
                endif
        endif

endif
ifeq "$(CFG)" "Release"
#	CFLAGS += -O2 -fno-tree-pre -fno-strict-aliasing
	CFLAGS += -O3 -fno-tree-pre -fno-strict-aliasing
	CFLAGS += -DNDEBUG

	ifeq ($(SSE_GENERATION), 2)
		CFLAGS += -msse2
	else
		ifeq ($(SSE_GENERATION), 3)
			CFLAGS += -msse3 -mssse3
		else
			($error "Only SSE2 and SSE3 are supported")
		endif
	endif

endif

CFLAGS += $(INC_DIRS_OPTION) $(DEFINES_OPTION)
LDFLAGS += $(LIB_DIRS_OPTION) $(USED_LIBS_OPTION)

# define a function that takes a source file and creates targets matching to it
define CREATE_SRC_TARGETS
# create a target for the object file
$(call SRC_TO_OBJ,$1) : $1 | $(INT_DIR)
	$(CC) -c $(CFLAGS) -o $$@ $$<

# create a target for its dependency file
$(call SRC_TO_DEP,$1) : $1 | $(INT_DIR)
	$(CC) $(CFLAGS) -M -MF $$@ -MT "$(call SRC_TO_OBJ,$1) $$@" $1
endef

#############################################################################
# Targets
#############################################################################
.PHONY: all clean install uninstall

# define the target 'all' (it is first, and so, default)
all: $(OUTPUT_FILE)

# Intermediate directory
$(INT_DIR):
	mkdir -p $(INT_DIR)

# create targets for each source file
$(foreach src,$(SRC_FILES),$(eval $(call CREATE_SRC_TARGETS,$(src))))

# include all dependency files
-include $(DEP_FILES)

# Output directory
$(OUT_DIR):
	mkdir -p $(OUT_DIR)

# Final output file
$(OUTPUT_FILE): $(OBJ_FILES) | $(OUT_DIR)
	$(OUTPUT_COMMAND)

install: $(OUTPUT_FILE)
	$(CP) $(OUTPUT_FILE) $(INST_DIR)

uninstall:
	$(RM) -f $(INST_DIR)/$(OUTPUT_NAME)

clean:
	$(RM) $(OUTPUT_FILE) $(OBJ_FILES) $(DEP_FILES)
	
